workflows:
  react-native-android:
    name: Untold App - Fixed Artifacts
    max_build_duration: 120
    instance_type: mac_mini_m1
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: main
          include: true
          source: true
    environment:
      groups:
        - env
      node: 18
      java: 17
    scripts:
      - name: Install dependencies
        script: |
          npm cache clean --force
          npm install
      
      - name: Install Expo CLI
        script: |
          npm install -g @expo/cli@latest
          npx expo --version
      
      - name: Create minimal app.json
        script: |
          cat > app.json << 'EOF'
          {
            "expo": {
              "name": "UntoldApp",
              "slug": "untold-app",
              "version": "1.0.0",
              "android": {
                "package": "com.untold.shareapp",
                "versionCode": 1
              },
              "plugins": []
            }
          }
          EOF
          echo "Created minimal app.json:"
          cat app.json
      
      - name: Create basic app structure
        script: |
          mkdir -p src
          cat > App.tsx << 'EOF'
          import React from 'react';
          import { Text, View, StyleSheet } from 'react-native';
          
          export default function App() {
            return (
              <View style={styles.container}>
                <Text style={styles.text}>Welcome to Untold App!</Text>
              </View>
            );
          }
          
          const styles = StyleSheet.create({
            container: {
              flex: 1,
              justifyContent: 'center',
              alignItems: 'center',
              backgroundColor: '#fff',
            },
            text: {
              fontSize: 18,
              fontWeight: 'bold',
            },
          });
          EOF
          rm -rf app/
      
      - name: Prebuild Android
        script: |
          rm -rf android ios .expo
          npx expo prebuild --platform android --clean --no-install
      
      - name: Fix Kotlin and build configuration
        script: |
          cd android
          
          cat > gradle.properties << 'EOF'
          org.gradle.jvmargs=-Xmx4096m -XX:MaxMetaspaceSize=512m
          org.gradle.parallel=true
          org.gradle.daemon=true
          android.useAndroidX=true
          android.enableJetifier=true
          android.defaults.buildfeatures.buildconfig=true
          android.nonTransitiveRClass=false
          android.enableR8.fullMode=false
          kotlin.version=1.8.22
          EOF
          
          if [ -f "build.gradle" ]; then
            sed -i.bak 's/kotlin("android") version "[^"]*"/kotlin("android") version "1.8.22"/g' build.gradle
            sed -i.bak 's/kotlin_version = "[^"]*"/kotlin_version = "1.8.22"/g' build.gradle
            sed -i.bak 's/id "org.jetbrains.kotlin.android" version "[^"]*"/id "org.jetbrains.kotlin.android" version "1.8.22"/g' build.gradle
          fi
          
          if [ -f "app/build.gradle" ]; then
            sed -i.bak 's/minifyEnabled true/minifyEnabled false/g' app/build.gradle
            sed -i.bak 's/shrinkResources true/shrinkResources false/g' app/build.gradle
          fi
          
          chmod +x ./gradlew
      
      - name: Clean and build APK
        script: |
          cd android
          ./gradlew clean
          ./gradlew assembleDebug --stacktrace
          
          echo "=== Checking for APK files ==="
          find . -name "*.apk" -type f
          ls -la app/build/outputs/apk/debug/ || echo "Debug folder not found"
          ls -la app/build/outputs/apk/ || echo "APK folder not found"
      
      - name: Copy APK to root for easier access
        script: |
          cd android
          echo "=== Copying APK to project root ==="
          find . -name "*.apk" -exec cp {} ../untold-app.apk \;
          ls -la ../untold-app.apk || echo "APK copy failed"
          
          # Also copy to a standard location
          mkdir -p ../build-outputs
          find . -name "*.apk" -exec cp {} ../build-outputs/ \;
          ls -la ../build-outputs/
    
    artifacts:
      - untold-app.apk
      - build-outputs/**/*
      - android/app/build/outputs/**/*.apk
      - android/app/build/outputs/apk/debug/*.apk
      - android/app/build/outputs/apk/release/*.apk
    
    publishing:
      email:
        recipients:
          - skbad911@gmail.com
        notify:
          success: true
          failure: true